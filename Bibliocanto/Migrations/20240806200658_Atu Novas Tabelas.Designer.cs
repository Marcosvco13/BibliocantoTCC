// <auto-generated />
using System;
using Bibliocanto.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bibliocanto.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240806200658_Atu Novas Tabelas")]
    partial class AtuNovasTabelas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bibliocanto.Models.AvaliacaoComentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Curtida")
                        .HasColumnType("bit");

                    b.Property<int>("IdComentarioId")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdComentarioId");

                    b.ToTable("AvaliacaoComentarios");
                });

            modelBuilder.Entity("Bibliocanto.Models.AvaliacaoLivro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdLivroId")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QuantEstrela")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdLivroId");

                    b.ToTable("AvaliacaoLivros");
                });

            modelBuilder.Entity("Bibliocanto.Models.AvaliacaoResenha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Curtida")
                        .HasColumnType("bit");

                    b.Property<int>("IdResenhaId")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdResenhaId");

                    b.ToTable("AvaliacaoResenhas");
                });

            modelBuilder.Entity("Bibliocanto.Models.ComentarioResenha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AvaliacaoComentarioId")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DataComentario")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdResenhaId")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AvaliacaoComentarioId");

                    b.HasIndex("IdResenhaId");

                    b.ToTable("ComentarioResenhas");
                });

            modelBuilder.Entity("Bibliocanto.Models.Estantes", b =>
                {
                    b.Property<string>("IdUser")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateAdd")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdLivroId")
                        .HasColumnType("int");

                    b.Property<bool>("Lido")
                        .HasColumnType("bit");

                    b.Property<int>("Relido")
                        .HasColumnType("int");

                    b.HasKey("IdUser");

                    b.HasIndex("IdLivroId");

                    b.ToTable("Estantes");
                });

            modelBuilder.Entity("Bibliocanto.Models.Livros", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AvaliacaoLivroId")
                        .HasColumnType("int");

                    b.Property<string>("CaminhoImagem")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EstantesIdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdAutor")
                        .HasColumnType("int");

                    b.Property<int>("IdEditora")
                        .HasColumnType("int");

                    b.Property<int>("IdGenero")
                        .HasColumnType("int");

                    b.Property<string>("NomeLivro")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ResenhasId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AvaliacaoLivroId");

                    b.HasIndex("EstantesIdUser");

                    b.HasIndex("ResenhasId");

                    b.ToTable("Livros");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CaminhoImagem = "https://m.media-amazon.com/images/I/612oPQzTN7L._SY466_.jpg",
                            IdAutor = 1,
                            IdEditora = 1,
                            IdGenero = 1,
                            NomeLivro = "Crime e Castigo"
                        },
                        new
                        {
                            Id = 2,
                            CaminhoImagem = "https://m.media-amazon.com/images/I/612oPQzTN7L._SY466_.jpg",
                            IdAutor = 2,
                            IdEditora = 2,
                            IdGenero = 2,
                            NomeLivro = "Guerra do Velho"
                        });
                });

            modelBuilder.Entity("Bibliocanto.Models.Resenhas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AvaliacaoResenhaId")
                        .HasColumnType("int");

                    b.Property<int?>("ComentarioResenhaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataResenha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdLivrosId")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Resenha")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TituloResenha")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AvaliacaoResenhaId");

                    b.HasIndex("ComentarioResenhaId");

                    b.HasIndex("IdLivrosId");

                    b.ToTable("Resenhas");
                });

            modelBuilder.Entity("Bibliocanto.Models.AvaliacaoComentario", b =>
                {
                    b.HasOne("Bibliocanto.Models.ComentarioResenha", "IdComentario")
                        .WithMany()
                        .HasForeignKey("IdComentarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdComentario");
                });

            modelBuilder.Entity("Bibliocanto.Models.AvaliacaoLivro", b =>
                {
                    b.HasOne("Bibliocanto.Models.Livros", "IdLivro")
                        .WithMany()
                        .HasForeignKey("IdLivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdLivro");
                });

            modelBuilder.Entity("Bibliocanto.Models.AvaliacaoResenha", b =>
                {
                    b.HasOne("Bibliocanto.Models.Resenhas", "IdResenha")
                        .WithMany()
                        .HasForeignKey("IdResenhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdResenha");
                });

            modelBuilder.Entity("Bibliocanto.Models.ComentarioResenha", b =>
                {
                    b.HasOne("Bibliocanto.Models.AvaliacaoComentario", null)
                        .WithMany("ComentarioResenhas")
                        .HasForeignKey("AvaliacaoComentarioId");

                    b.HasOne("Bibliocanto.Models.Resenhas", "IdResenha")
                        .WithMany()
                        .HasForeignKey("IdResenhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdResenha");
                });

            modelBuilder.Entity("Bibliocanto.Models.Estantes", b =>
                {
                    b.HasOne("Bibliocanto.Models.Livros", "IdLivro")
                        .WithMany()
                        .HasForeignKey("IdLivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdLivro");
                });

            modelBuilder.Entity("Bibliocanto.Models.Livros", b =>
                {
                    b.HasOne("Bibliocanto.Models.AvaliacaoLivro", null)
                        .WithMany("Livros")
                        .HasForeignKey("AvaliacaoLivroId");

                    b.HasOne("Bibliocanto.Models.Estantes", null)
                        .WithMany("Livros")
                        .HasForeignKey("EstantesIdUser");

                    b.HasOne("Bibliocanto.Models.Resenhas", null)
                        .WithMany("Livros")
                        .HasForeignKey("ResenhasId");
                });

            modelBuilder.Entity("Bibliocanto.Models.Resenhas", b =>
                {
                    b.HasOne("Bibliocanto.Models.AvaliacaoResenha", null)
                        .WithMany("Resenhas")
                        .HasForeignKey("AvaliacaoResenhaId");

                    b.HasOne("Bibliocanto.Models.ComentarioResenha", null)
                        .WithMany("Resenhas")
                        .HasForeignKey("ComentarioResenhaId");

                    b.HasOne("Bibliocanto.Models.Livros", "IdLivros")
                        .WithMany()
                        .HasForeignKey("IdLivrosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdLivros");
                });

            modelBuilder.Entity("Bibliocanto.Models.AvaliacaoComentario", b =>
                {
                    b.Navigation("ComentarioResenhas");
                });

            modelBuilder.Entity("Bibliocanto.Models.AvaliacaoLivro", b =>
                {
                    b.Navigation("Livros");
                });

            modelBuilder.Entity("Bibliocanto.Models.AvaliacaoResenha", b =>
                {
                    b.Navigation("Resenhas");
                });

            modelBuilder.Entity("Bibliocanto.Models.ComentarioResenha", b =>
                {
                    b.Navigation("Resenhas");
                });

            modelBuilder.Entity("Bibliocanto.Models.Estantes", b =>
                {
                    b.Navigation("Livros");
                });

            modelBuilder.Entity("Bibliocanto.Models.Resenhas", b =>
                {
                    b.Navigation("Livros");
                });
#pragma warning restore 612, 618
        }
    }
}
